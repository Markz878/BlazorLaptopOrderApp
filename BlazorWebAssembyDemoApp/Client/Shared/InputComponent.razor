@using System.Linq.Expressions
@using System.Globalization;

@typeparam T
@inherits InputBase<T>

<div class="@DivClass">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@Id" class="@LabelClass">@Label</label>
    }

    <input placeholder="@PlaceHolder" id="@Id" class="@InputClass" @bind="@CurrentValue" />
    @if (ValidationFor != null)
    {
        <div>
            <ValidationMessage For="ValidationFor" />
        </div>
    }
</div>

@code {
    [Parameter] public string Id { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public string LabelClass { get; set; } = "";
    [Parameter] public string PlaceHolder { get; set; }
    [Parameter] public string InputClass { get; set; } = "";
    [Parameter] public string DivClass { get; set; } = "";
    [Parameter] public Expression<Func<T>> ValidationFor { get; set; }

    protected override bool TryParseValueFromString(string value, out T result, out string validationErrorMessage)
    {
        if (typeof(T) == typeof(string))
        {
            result = (T)(object)value;
            validationErrorMessage = null;

            return true;
        }
        else if (typeof(T) == typeof(int))
        {
            int.TryParse(value, NumberStyles.Integer, CultureInfo.InvariantCulture, out var parsedValue);
            result = (T)(object)parsedValue;
            validationErrorMessage = null;

            return true;
        }
        else if (typeof(T) == typeof(Guid))
        {
            Guid.TryParse(value, out var parsedValue);
            result = (T)(object)parsedValue;
            validationErrorMessage = null;

            return true;
        }
        else if (typeof(T).IsEnum)
        {
            // There's no non-generic Enum.TryParse (https://github.com/dotnet/corefx/issues/692)
            try
            {
                result = (T)Enum.Parse(typeof(T), value);
                validationErrorMessage = null;

                return true;
            }
            catch (ArgumentException)
            {
                result = default;
                validationErrorMessage = $"The {FieldIdentifier.FieldName} field is not valid.";

                return false;
            }
        }

        throw new InvalidOperationException($"{GetType()} does not support the type '{typeof(T)}'.");
    }
}
